


import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.lang.management.ManagementFactory;
import java.util.Arrays;
import java.util.Iterator;
import java.util.concurrent.ThreadLocalRandom;

import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.poifs.filesystem.POIFSFileSystem;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.DataFormatter;
import org.apache.poi.ss.usermodel.Row;


/**
 * Decompression application using prediction by partial matching (PPM) with arithmetic coding.
 * <p>Usage: java PpmDecompress InputFile OutputFile</p>
 * <p>This decompresses files generated by the "PpmCompress" application.</p>
 */
public final class PpmDecompress {
	
	// Must be at least -1 and match PpmCompress. Warning: Exponential memory usage at O(257^n).
	private static final int MODEL_ORDER = 3;

	// To allow unit testing, this method is package-private instead of private.
	static void decompress(BitInputStream in, OutputStream out) throws IOException {
		// Set up decoder and model. In this PPM model, symbol 256 represents EOF;
		// its frequency is 1 in the order -1 context but its frequency
		// is 0 in all other contexts (which have non-negative order).
		ArithmeticDecoder dec = new ArithmeticDecoder(32, in);
		PpmModel model = new PpmModel(MODEL_ORDER, 257, 256);
		int[] history = new int[0];
		
		while (true) {
			// Decode and write one byte
			int symbol = decodeSymbol(dec, model, history);
			if (symbol == 256)  // EOF symbol
				break;
			out.write(symbol);
			model.incrementContexts(history, symbol);
			
			if (model.modelOrder >= 1) {
				// Prepend current symbol, dropping oldest symbol if necessary
				if (history.length < model.modelOrder)
					history = Arrays.copyOf(history, history.length + 1);
				System.arraycopy(history, 0, history, 1, history.length - 1);
				history[0] = symbol;
			}
		}
	}
	
	
	private static int decodeSymbol(ArithmeticDecoder dec, PpmModel model, int[] history) throws IOException {
		// Try to use highest order context that exists based on the history suffix. When symbol 256
		// is consumed at a context at any non-negative order, it means "escape to the next lower order
		// with non-empty context". When symbol 256 is consumed at the order -1 context, it means "EOF".
		outer:
		for (int order = history.length; order >= 0; order--) {
			PpmModel.Context ctx = model.rootContext;
			for (int i = 0; i < order; i++) {
				if (ctx.subcontexts == null)
					throw new AssertionError();
				ctx = ctx.subcontexts[history[i]];
				if (ctx == null)
					continue outer;
			}
			int symbol = dec.read(ctx.frequencies);
			if (symbol < 256)
				return symbol;
			// Else we read the context escape symbol, so continue decrementing the order
		}
		// Logic for order = -1
		return dec.read(model.orderMinus1Freqs);
	}
	
	static void compress(InputStream in, BitOutputStream out) throws IOException {
		// Set up encoder and model. In this PPM model, symbol 256 represents EOF;
		// its frequency is 1 in the order -1 context but its frequency
		// is 0 in all other contexts (which have non-negative order).
		ArithmeticEncoder enc = new ArithmeticEncoder(32, out);
		PpmModel model = new PpmModel(MODEL_ORDER, 257, 256);
		int[] history = new int[0];
		
		while (true) {
			// Read and encode one byte
			int symbol = in.read();
			//System.out.println(symbol);
			if (symbol == -1)
				break;
			encodeSymbol(model, history, symbol, enc);
			model.incrementContexts(history, symbol);
			
			if (model.modelOrder >= 1) {
				// Prepend current symbol, dropping oldest symbol if necessary
				if (history.length < model.modelOrder)
					history = Arrays.copyOf(history, history.length + 1);
				System.arraycopy(history, 0, history, 1, history.length - 1);
				history[0] = symbol;
			}
		}
		
		encodeSymbol(model, history, 256, enc);  // EOF
		enc.finish();  // Flush remaining code bits
	}
	
	
	private static void encodeSymbol(PpmModel model, int[] history, int symbol, ArithmeticEncoder enc) throws IOException {
		// Try to use highest order context that exists based on the history suffix, such
		// that the next symbol has non-zero frequency. When symbol 256 is produced at a context
		// at any non-negative order, it means "escape to the next lower order with non-empty
		// context". When symbol 256 is produced at the order -1 context, it means "EOF".
		outer:
		for (int order = history.length; order >= 0; order--) {
			PpmModel.Context ctx = model.rootContext;
			for (int i = 0; i < order; i++) {
				if (ctx.subcontexts == null)
					throw new AssertionError();
				ctx = ctx.subcontexts[history[i]];
				if (ctx == null)
					continue outer;
			}
			if (symbol != 256 && ctx.frequencies.get(symbol) > 0) {
				enc.write(ctx.frequencies, symbol);
				return;
			}
			// Else write context escape symbol and continue decrementing the order
			enc.write(ctx.frequencies, 256);
		}
		// Logic for order = -1
		enc.write(model.orderMinus1Freqs, symbol);
	}
	
}
